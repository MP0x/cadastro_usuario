# coding: utf-8
import string
import mysql.connector
import smtplib
from conecta_db import mydb
import os
import smtplib
import sys
import random
from time import sleep
import bcrypt

mycursor = mydb.cursor()

mycursor.execute('create database if not exists cadastro_usuario')

mycursor.execute('use cadastro_usuario')

mycursor.execute('create table if not exists login  (usuario varchar(20) primary key, '
                 'senha varchar(30) not null, email varchar(55) not null)')


def verificar_acesso(usuario, senha):
    # mycursor = mydb.cursor()
    verificador = verificar_hash(usuario, senha)
    print(verificador)
    if verificador == True:
        return True
    else:
        return False
    # sql = "select * from login WHERE usuario = %s and senha = %s"
    # val = (usuario, senha)
    # mycursor.execute(sql, val)
    # # mycursor.execute(f'select usuario from login where usuario = {usuario} and senha = {senha} ')
    # mycursor.fetchall()
    # rc = mycursor.rowcount
    # if rc == 1:
    #     return True
    # else:
    #     return False


def verificar_usuario(usuario):
    mycursor = mydb.cursor()
    sql = "select * from login WHERE usuario = %s"
    val = (usuario,)
    mycursor.execute(sql, val)
    # mycursor.execute(f'select usuario from login where usuario = {usuario} ')
    mycursor.fetchall()
    rc = mycursor.rowcount
    if rc == 1:
        return True
    else:
        return False


def cadastrar_usuario():
    try:
        print()
        usuario = input('Digite o nome do usuário: '.title()).strip()
        if verificar_usuario(usuario) == False:

            a = True
            while a:
                senha1 = input('Digite a senha: '.title()).strip()

                if len(senha1) < 8:
                    print('DIGITE UMA SENHA COM NO MINIMO 8 CARACTERES.')
                else:
                    senha2 = input('Digite novamente a senha: '.title()).strip()

                    if senha1 == senha2:
                        cript_senha = criar_hash(senha1)

                        a = False
                    else:
                        print('Suas senhas estão diferentes !! ')
                        print('Digite novamente a senha !')

                h = True

                while h:
                    email = input('Digite o seu email: ').strip()
                    codigo = validar_email(usuario, email)
                    print(codigo)
                    print('Verifique a sua caixa de email e spam.\n')
                    codigo2 = input('Digite o codigo enviado por email: ').strip()
                    if codigo == codigo2:
                        print('O codigo esta certo')
                        sql = "INSERT INTO login (usuario, senha, email) VALUES (%s, %s, %s)"
                        val = (usuario, cript_senha, email)
                        mycursor.execute(sql, val)
                        mydb.commit()
                        os.system('cls')
                        print('Usuario Cadastrado com Sucesso !!')
                        h = False
                    else:
                        print('Digite o código valido !')
        else:
            print('Usuario já existe em nosso Banco de Dados !!')
            print('Favor digitar novamente.')
            cadastrar_usuario()

    except ValueError as erro:
        # print(erro)
        print("Digite um valor valido.")
        cadastrar_usuario()


def lembrar_senha(usuario, email):
    mycursor = mydb.cursor()
    sql = "select * from login WHERE usuario = %s and email = %s"
    val = (usuario, email)
    mycursor.execute(sql, val)
    # mycursor.execute(f'select usuario from login where usuario = {usuario} and email = {email} ')
    mycursor.fetchall()
    rc = mycursor.rowcount
    if rc == 1:
        return True
    else:
        return False


def consulta_usuario():
    mycursor = mydb.cursor()
    mycursor.execute('use cadastro_usuario')
    while True:
        print('=' * 50)
        print('BEM VINDO AO SISTEMA'.center(50))
        print('=' * 50)

        opt = int(input(
            '''         DIGITE A OPÇÃO DESEJADA:
            [1] -> Acesso ao Banco de Dados.
            [2] -> Cadastrar Usuario e Senha.
            [3] -> Esqueci Minha Senha.
            [4] -> Sair. 
            ->   '''))

        if opt == 1:

            usuario = input('Digite o seu usuario [letra minuscula]: ').strip().lower()
            senha = input('Digite a sua senha: ').strip()
            if verificar_acesso(usuario, senha) == True:
                os.system('cls')
                print('               Acesso Concedido !!')

                return True

            else:
                print('Digite um usuario cadastrado!')
                verificar_acesso()

        elif opt == 2:
            cadastrar_usuario()


        elif opt == 3:
            y = True
            while y:
                usuario = input('Digite o seu usuario cadastrado [letra minuscula]: ').strip().lower()
                email = input('Digite o email cadastrado: ').strip()
                if lembrar_senha(usuario, email) == True:
                    sql = "select senha from login WHERE usuario = %s and email = %s"
                    val = (usuario, email)
                    mycursor.execute(sql, val)
                    exibir_senha = mycursor.fetchall()
                    # print(exibir_senha)
                    enviar_email(usuario, email, exibir_senha[0][0])

                    # print(f'A Senha do usuario {usuario} é {exibir_senha[0][0]}')

                    sleep(1.5)
                    y = False
                else:
                    print('Dados invalidos !!')

        elif opt == 4:
            print()
            print('VOLTE SEMPRE !! TCHAU !')
            sleep(1.5)
            sys.exit()


def enviar_email(usuario, email, senha):
    try:
        msg = "Subject: Senha\nOla, " + usuario + ".\nSua senha e " + senha + "\nNao responda esse email."
        smtplibObj = smtplib.SMTP("smtp.gmail.com", 587)
        smtplibObj.ehlo()
        smtplibObj.starttls()
        smtplibObj.login("frangoc02@gmail.com", "mwzwyoicgstktuzo")
        smtplibObj.sendmail("frangoc02@gmail.com", email, msg)
        smtplibObj.quit()
        print("O e-mail com a senha foi enviado com sucesso.")
    except:
        print("Erro ao tentar enviar e-mail para troca de senha!")


def validar_email(usuario, email):
    # codigo = random.randint(100000, 999999) Codigo so com numeros
    codigo = "".join(random.choices(string.ascii_uppercase + string.digits, k=8))
    try:
        msg = "Subject: Codigo de acesso\nOla " + usuario + ".\nNumero para digitar no programa: " + codigo + "\nNao responda esse email."
        smtplibObj = smtplib.SMTP("smtp.gmail.com", 587)
        smtplibObj.ehlo()
        smtplibObj.starttls()
        smtplibObj.login("frangoc02@gmail.com", "mwzwyoicgstktuzo")
        smtplibObj.sendmail("frangoc02@gmail.com", email, msg)
        smtplibObj.quit()
        print("O e-mail com a senha foi enviado com sucesso.")
        return codigo
    except:
        print("Erro ao tentar enviar e-mail de validacao!")


def criar_hash(senha):
    salt = bcrypt.gensalt(8)
    hash_senha = bcrypt.hashpw(senha.encode('utf-8'), salt)
    return hash_senha
    # verificar_hash(senha.encode('utf-8'), hash_senha)


def verificar_hash(usuario, senha):
    mycursor = mydb.cursor()
    sql = "select senha from login WHERE usuario = %s"
    val = (usuario,)
    mycursor.execute(sql, val)
    hash_senha = mycursor.fetchall()
    hash_senha = hash_senha[0][0].encode('utf-8')
    senha = senha.encode('utf-8')
    print(f'{senha}    a senha em criptografada é , {hash_senha}')
    if bcrypt.checkpw(senha, hash_senha):
        a = False
        return True
    else:
        print('Senha diferente! Digite novamente !')
        return False

# validar_email('leandro', 'lp.godoy@hotmail.com')
